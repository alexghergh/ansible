# Arch Linux
- name: Ensure the neovim package is installed (Archlinux).
  pacman:
    name: neovim
    state: latest
  when: ansible_distribution == "Archlinux"

# Ubuntu / Debian
- name: Ensure neovim dependencies are installed (Ubuntu / Debian).
  apt:
    name: "{{ neovim_dependencies_ubuntu }}"
    state: latest
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Ensure the neovim git repo is present (Ubuntu / Debian).
  become_user: "{{ user }}"
  git:
    repo: "{{ neovim_repo }}"
    dest: "{{ neovim_repo_dest }}"
    version: "{{ neovim_repo_version }}"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Ensure the repo is clean of config files (Ubuntu / Debian).
  become_user: "{{ user }}"
  command:
    cmd: "{{ neovim_clean_repo_cmd }}"
    chdir: "{{ neovim_repo_dest }}"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Configure and install neovim part I (Ubuntu / Debian).
  become_user: "{{ user }}"
  command:
    cmd: "{{ neovim_install_cmd_1 }}"
    chdir: "{{ neovim_repo_dest }}"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Configure and install neovim part II (Ubuntu / Debian).
  command:
    cmd: "{{ neovim_install_cmd_2 }}"
    chdir: "{{ neovim_repo_dest }}"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

- name: Ensure pynvim is installed as a python package.
  become_user: "{{ user }}"
  pip:
    name: pynvim
    state: latest

- name: Ensure the neovim config dir doesn't exist already.
  file:
    path: "{{ neovim_config_dir }}"
    state: absent

- name: Stow the neovim configs.
  become_user: "{{ user }}"
  command:
    cmd: "{{ neovim_stow_cmd }}"
    chdir: "{{ dotfiles_dir }}"

- name: Ensure the neovim plugins are installed.
  become_user: "{{ user }}"
  shell: "{{ neovim_plugins_install_cmd }}"
