- name: Ensure .config/nvim/ doesn't exist already.
  file:
    path: "{{ xdg_config }}/nvim/"
    state: absent

# Arch Linux
- name: Ensure the neovim package is installed (Archlinux).
  pacman:
    name: neovim
    state: latest
  when: ansible_distribution == "Archlinux"

# Ubuntu / Debian
- name: Ensure neovim dependencies are installed (Ubuntu / Debian).
  apt:
    name: [ 'python3-pip', 'ninja-build', 'gettext', 'libtool', 'libtool-bin', 'autoconf', 'automake', 'cmake', 'g++', 'pkg-config', 'unzip', 'curl' ]
    state: latest
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Clone the neovim git repo (Ubuntu / Debian).
  become_user: "{{ user }}"
  git:
    repo: "https://github.com/neovim/neovim"
    dest: "{{ home }}/neovim-git"
    version: "stable"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Configure and install neovim part I (Ubuntu / Debian).
  become_user: "{{ user }}"
  command:
    cmd: "make CMAKE_BUILD_TYPE=Release"
    chdir: "{{ home }}/neovim-git"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Configure and install neovim part II (Ubuntu / Debian).
  command:
    cmd: "make install"
    chdir: "{{ home }}/neovim-git"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Install pynvim (Ubuntu / Debian).
  pip:
    name: pynvim
    state: latest
    executable: pip3
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Ubuntu / Debian
- name: Install some extra neovim stuff (Ubuntu / Debian).
  apt:
    name: [ 'ccls', 'nodejs' ]
    state: latest
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

# Arch Linux
# install pyenv, set up a default environment, install pynvim
# install nodejs
# install ccls
# install tree-sitter
# install luajit?

- name: Stow the neovim configs.
  command:
    cmd: 'stow --restow --verbose --dir="{{ home }}/.dotfiles" --target="{{ home }}" vim'
    chdir: "{{ home }}/.dotfiles"
